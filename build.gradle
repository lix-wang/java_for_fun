buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://maven.springframework.org/release" }
        maven { url "http://maven.springframework.org/milestone" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

allprojects {
    group "$projectGroup"
    version "$projectVersion"
    apply from: rootProject.file("gradle/dependency.gradle")
}

// 子模块通用配置
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    buildDir = "out/output"

    // jvm 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://maven.springframework.org/release" }
        maven { url "http://maven.springframework.org/milestone" }
    }

    // idea 插件会默认下载source和doc文件
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    // 子模块添加依赖
    dependencies {
        testCompile libs['spring-boot-starter-test']
    }

    dependencies {
        compileOnly libs['lombok']
        annotationProcessor libs['lombok']
        testCompileOnly libs['lombok']
        testAnnotationProcessor libs['lombok']
    }

    // 生成source源码包
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier 'sources'
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    // 去掉默认的tomcat 和logging
    configurations {
        all*.exclude module: "spring-boot-starter-tomcat"
        all*.exclude module: "spring-boot-starter-logging"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                // 指定相关信息
                groupId "$projectGroup"
                version "$projectMavenVersion"
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
        repositories {
            maven {
                // 指定要上传的仓库
                url "https://maven.pkg.github.com/wang-0821/gradle_repo"

                // 认证用户，可以设置在gradle.properties中并且ignore it
                credentials {
                    username "$gradleRepoUsername"
                    password "$gradleRepoPassword"
                }
            }
        }
    }
}

// 执行自定义gradle wrapper task 自动生成gradlew脚本及配置，这里指定下载的Gradle版本
task gradleWrapper(type: Wrapper) {
    gradleVersion = "$gradleVersion"
}

