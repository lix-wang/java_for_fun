buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://maven.springframework.org/release" }
        maven { url "http://maven.springframework.org/milestone" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

allprojects {
    group "$projectGroup"
    version "$projectMavenVersion"
    apply from: rootProject.file("gradle/dependency.gradle")
}

// 子模块通用配置
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    apply from: rootProject.file("gradle/maven_publish.gradle")

    buildDir = "out/output"

    // jvm 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://maven.springframework.org/release" }
        maven { url "http://maven.springframework.org/milestone" }
        maven {
            // 指定要上传的仓库
            url "$gradleRepoUrl"

            // 认证用户，可以设置在gradle.properties中并且ignore it
            credentials {
                username "$gradleRepoUsername"
                password "$gradleRepoPassword"
            }
        }
    }

    // idea 插件会默认下载source和doc文件
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    dependencies {
        compileOnly libs['lombok']
        annotationProcessor libs['lombok']
        testCompileOnly libs['lombok']
        testAnnotationProcessor libs['lombok']

        testCompile libs['spring-boot-starter-test']
    }

    // set encoding
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // 去掉默认的tomcat 和logging
    configurations {
        all*.exclude module: "spring-boot-starter-tomcat"
        all*.exclude module: "spring-boot-starter-logging"
    }
}

// 执行自定义gradle wrapper task 自动生成gradlew脚本及配置，这里指定下载的Gradle版本
task gradleWrapper(type: Wrapper) {
    gradleVersion = "$gradleVersion"
}

